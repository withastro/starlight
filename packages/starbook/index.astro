---
import type { GetStaticPathsResult, InferGetStaticPropsType } from 'astro';
import { getCollection } from 'astro:content';
import config from 'virtual:starbook/user-config';
import Header from './components/Header.astro';
import Sidebar from './components/Sidebar.astro';
import TableOfContents from './components/TableOfContents.astro';
import { generateToC } from './components/TableOfContents/generateToC';
import {
  slugToDir,
  slugToLang,
  slugToLocale,
  slugToParam,
} from './utils/slugs';
import HeadSEO from './components/HeadSEO.astro';
import LastUpdated from './components/LastUpdated.astro';
import EditLink from './components/EditLink.astro';
import { getPrevNextLinks, getSidebar } from './utils/navigation';
import PrevNextLinks from './components/PrevNextLinks.astro';

import './style/props.css';
import 'virtual:starbook/user-css';

export async function getStaticPaths() {
  const docs = await getCollection('docs');

  return docs.map((doc) => ({
    params: { slug: slugToParam(doc.slug) },
    props: doc,
  })) satisfies GetStaticPathsResult;
}

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { render, data, slug, id } = Astro.props;
const { Content, headings } = await render();
const lang = slugToLang(slug);
const locale = slugToLocale(slug);
const dir = slugToDir(slug);
const sidebar = getSidebar(Astro.url.pathname, locale);
const prevNextLinks = getPrevNextLinks(sidebar);
---

<html lang={lang} dir={dir}>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <HeadSEO data={data} lang={lang} />
  </head>
  <body>
    <Header locale={locale} />
    <div class="wrapper">
      <Sidebar sidebar={sidebar} />
      <main id="overview">
        <div class="content" data-pagefind-body>
          <h1>{data.title}</h1>
          <Content />
          <footer>
            <PrevNextLinks {...prevNextLinks} />
            <LastUpdated id={id} lang={lang} />
          </footer>
        </div>
        <aside>
          <h2>On this page</h2>
          <TableOfContents
            toc={generateToC(headings, config.tableOfContents)}
          />
          <EditLink data={data} id={id} />
        </aside>
      </main>
    </div>

    <style>
      .wrapper {
        display: grid;
        grid-template-columns: auto 1fr;
        gap: 4rem;
      }
      main {
        display: grid;
        grid-template-columns: 1fr auto;
        gap: 4rem;
      }

      .content {
        max-width: 65ch;
        margin-inline: auto;
      }
    </style>
  </body>
</html>
