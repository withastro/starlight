---
import Icon from '../user-components/Icon.astro';
import project from 'virtual:starlight/project-context';
import Pagefind from './pagefind/Pagefind.astro';
import type { StarlightPagefindOptions } from './pagefind/starlight-pagefind';

const clientTranslations: StarlightPagefindOptions['translations'] = {};
for (const [key, value] of Object.entries(Astro.locals.t.all())) {
	if (isClientTranslation(key)) clientTranslations[key] = value;
}
function isClientTranslation(key: string): key is keyof StarlightPagefindOptions['translations'] {
	return key.startsWith('search.pagefind.client.');
}

const dataAttributes: DOMStringMap = { 'data-translations': JSON.stringify(clientTranslations) };
if (project.trailingSlash === 'never') dataAttributes['data-strip-trailing-slash'] = '';
---

<site-search class={Astro.props.class} {...dataAttributes}>
	<button
		data-open-modal
		disabled
		aria-label={Astro.locals.t('search.label')}
		aria-keyshortcuts="Control+K"
	>
		<Icon name="magnifier" />
		<span class="sl-hidden md:sl-block" aria-hidden="true">{Astro.locals.t('search.label')}</span>
		<kbd class="sl-hidden md:sl-flex" style="display: none;">
			<kbd>{Astro.locals.t('search.ctrlKey')}</kbd><kbd>K</kbd>
		</kbd>
	</button>

	<dialog style="padding:0" aria-label={Astro.locals.t('search.label')}>
		<div class="dialog-frame sl-flex">
			{
				/* TODO: Make the layout of this button flexible to accommodate different word lengths. Currently hard-coded for English: “Cancel” */
			}
			<button data-close-modal class="sl-flex md:sl-hidden">
				{Astro.locals.t('search.cancelLabel')}
			</button>
			{/* TODO(HiDeoo) Restore dev mode warning. */}
			<!-- {
				import.meta.env.DEV ? (
					<div style="margin: auto; text-align: center; white-space: pre-line;" dir="ltr">
						<p>{Astro.locals.t('search.devWarning')}</p>
					</div>
				) : (
					<Pagefind />
				)
			} -->
			<Pagefind />
		</div>
	</dialog>
</site-search>

{
	/**
	 * This is intentionally inlined to avoid briefly showing an invalid shortcut.
	 * Purposely using the deprecated `navigator.platform` property to detect Apple devices, as the
	 * user agent is spoofed by some browsers when opening the devtools.
	 */
}
<script is:inline>
	(() => {
		const openBtn = document.querySelector('button[data-open-modal]');
		const shortcut = openBtn?.querySelector('kbd');
		if (!openBtn || !(shortcut instanceof HTMLElement)) return;
		const platformKey = shortcut.querySelector('kbd');
		if (platformKey && /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform)) {
			platformKey.textContent = '⌘';
			openBtn.setAttribute('aria-keyshortcuts', 'Meta+K');
		}
		shortcut.style.display = '';
	})();
</script>

<script>
	import { pagefindUserConfig } from 'virtual:starlight/pagefind-config';
	import type { StarlightPagefind } from './pagefind/starlight-pagefind';

	class SiteSearch extends HTMLElement {
		constructor() {
			super();
			const openBtn = this.querySelector<HTMLButtonElement>('button[data-open-modal]')!;
			const closeBtn = this.querySelector<HTMLButtonElement>('button[data-close-modal]')!;
			const dialog = this.querySelector('dialog')!;
			const dialogFrame = this.querySelector('.dialog-frame')!;

			/** Close the modal if a user clicks on a link or outside of the modal. */
			const onClick = (event: MouseEvent) => {
				const isLink = 'href' in (event.target || {});
				if (
					isLink ||
					(document.body.contains(event.target as Node) &&
						!dialogFrame.contains(event.target as Node))
				) {
					closeModal();
				}
			};

			const openModal = (event?: MouseEvent) => {
				dialog.showModal();
				document.body.toggleAttribute('data-search-modal-open', true);
				this.querySelector('input')?.focus();
				event?.stopPropagation();
				window.addEventListener('click', onClick);
			};

			const closeModal = () => dialog.close();

			openBtn.addEventListener('click', openModal);
			openBtn.disabled = false;
			closeBtn.addEventListener('click', closeModal);

			dialog.addEventListener('close', () => {
				document.body.toggleAttribute('data-search-modal-open', false);
				window.removeEventListener('click', onClick);
			});

			// Listen for `ctrl + k` and `cmd + k` keyboard shortcuts.
			window.addEventListener('keydown', (e) => {
				if ((e.metaKey === true || e.ctrlKey === true) && e.key === 'k') {
					dialog.open ? closeModal() : openModal();
					e.preventDefault();
				}
			});

			let translations = {};
			try {
				translations = JSON.parse(this.dataset.translations || '{}');
			} catch {}

			const shouldStrip = this.dataset.stripTrailingSlash !== undefined;
			const stripTrailingSlash = (path: string) => path.replace(/(.)\/(#.*)?$/, '$1$2');
			const formatURL = shouldStrip ? stripTrailingSlash : (path: string) => path;

			const { mergeIndex, openFilters, processTerm, showEmptyFilters, ...pagefindOptions } =
				pagefindUserConfig;

			window.addEventListener('DOMContentLoaded', () => {
				// TODO(HiDeoo) Restore dev mode check.
				// if (import.meta.env.DEV) return;
				const onIdle = window.requestIdleCallback || ((cb) => setTimeout(cb, 1));
				onIdle(async () => {
					await customElements.whenDefined('starlight-pagefind');
					const starlightPagefind = document.querySelector<StarlightPagefind>('starlight-pagefind');
					starlightPagefind?.init(
						{
							// TODO(HiDeoo) Restore `bundlePath` to its original value.
							// bundlePath: import.meta.env.BASE_URL.replace(/\/$/, '') + '/pagefind/',
							bundlePath: import.meta.env.DEV
								? 'http://localhost:4322/pagefind/'
								: import.meta.env.BASE_URL.replace(/\/$/, '') + '/pagefind/',
							mergeIndex,
							openFilters,
							processResult: (result) => {
								result.url = formatURL(result.url);
								result.sub_results = result.sub_results.map((sub_result) => {
									sub_result.url = formatURL(sub_result.url);
									return sub_result;
								});
								return result;
							},
							processTerm,
							showEmptyFilters,
							translations,
						},
						{
							...pagefindOptions,
							baseUrl: import.meta.env.BASE_URL,
						}
					);
				});
			});
		}
	}
	customElements.define('site-search', SiteSearch);
</script>

<style>
	@layer starlight.core {
		site-search {
			--sl-pagefind-ui-pad: 1rem;

			display: contents;
		}
		@media (min-width: 50rem) {
			site-search {
				--sl-pagefind-ui-pad: 1.5rem;
			}
		}
		button[data-open-modal] {
			display: flex;
			align-items: center;
			gap: 0.5rem;
			border: 0;
			background-color: transparent;
			color: var(--sl-color-gray-1);
			cursor: pointer;
			height: 2.5rem;
			font-size: var(--sl-text-xl);
		}

		@media (min-width: 50rem) {
			button[data-open-modal] {
				border: 1px solid var(--sl-color-gray-5);
				border-radius: 0.5rem;
				padding-inline-start: 0.75rem;
				padding-inline-end: 0.5rem;
				background-color: var(--sl-color-black);
				color: var(--sl-color-gray-2);
				font-size: var(--sl-text-sm);
				width: 100%;
				max-width: 22rem;
			}
			button[data-open-modal]:hover {
				border-color: var(--sl-color-gray-2);
				color: var(--sl-color-white);
			}

			button[data-open-modal] > :last-child {
				margin-inline-start: auto;
			}
		}

		button > kbd {
			border-radius: 0.25rem;
			font-size: var(--sl-text-2xs);
			gap: 0.25em;
			padding-inline: 0.375rem;
			background-color: var(--sl-color-gray-6);
		}

		kbd {
			font-family: var(--__sl-font);
		}

		dialog {
			margin: 0;
			background-color: var(--sl-color-gray-6);
			border: 1px solid var(--sl-color-gray-5);
			width: 100%;
			max-width: 100%;
			height: 100%;
			max-height: 100%;
			box-shadow: var(--sl-shadow-lg);
		}
		dialog[open] {
			display: flex;
		}

		dialog::backdrop {
			background-color: var(--sl-color-backdrop-overlay);
			-webkit-backdrop-filter: blur(0.25rem);
			backdrop-filter: blur(0.25rem);
		}

		.dialog-frame {
			position: relative;
			overflow: hidden;
			flex-direction: column;
			flex-grow: 1;
			gap: 1rem;
		}

		button[data-close-modal] {
			position: absolute;
			z-index: 1;
			align-items: center;
			align-self: flex-end;
			height: 3.2rem;
			padding: 0.25rem;
			border: 0;
			background: transparent;
			cursor: pointer;
			color: var(--sl-color-text-accent);
			margin-block-start: var(--sl-pagefind-ui-pad);
			margin-inline-end: var(--sl-pagefind-ui-pad);
		}

		:global(starlight-pagefind) {
			--sl-search-cancel-space: 5rem;
		}

		@media (min-width: 50rem) {
			:global(starlight-pagefind) {
				--sl-search-cancel-space: 0px;
			}

			dialog {
				margin: 4rem auto auto;
				border-radius: 0.5rem;
				width: 90%;
				max-width: 40rem;
				height: max-content;
				min-height: 10rem;
				max-height: calc(100% - 28rem);
			}
		}
	}
</style>

<style is:global>
	@layer starlight.core {
		[data-search-modal-open] {
			overflow: hidden;
		}
	}
</style>
