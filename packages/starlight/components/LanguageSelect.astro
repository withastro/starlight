---
import config from 'virtual:starlight/user-config';
import { localizedUrl } from '../utils/localizedUrl';
import { useTranslations } from '../utils/translations';
import Select from './Select.astro';

interface Props {
	locale: string | undefined;
}

/**
 * Get the equivalent of the current page path for the passed locale.
 */
function localizedPathname(locale: string | undefined): string {
	return localizedUrl(Astro.url, locale).pathname;
}

const t = useTranslations(Astro.props.locale);
---

{
	config.isMultilingual && (
		<starlight-lang-select>
			<Select
				icon="translate"
				label={t('languageSelect.accessibleLabel')}
				value={localizedPathname(Astro.props.locale)}
				options={Object.entries(config.locales).map(([code, locale]) => ({
					value: localizedPathname(code),
					selected: code === Astro.props.locale,
					label: locale!.label,
				}))}
				width="7em"
			/>
		</starlight-lang-select>
	)
}

<script>
	class StarlightLanguageSelect extends HTMLElement {
		constructor() {
			super();
			const select = this.querySelector('select');
			if (select) {
				select.addEventListener('change', (e) => {
					if (e.currentTarget instanceof HTMLSelectElement) {
						window.location.pathname = e.currentTarget.value;
					}
				});
			}
		}
	}
	customElements.define('starlight-lang-select', StarlightLanguageSelect);
</script>
