import { z } from 'astro/zod';
import type { SchemaContext } from 'astro:content';
import config from 'virtual:starlight/user-config';
import { collections } from 'virtual:starlight/collection-config';
import { stripLeadingAndTrailingSlashes } from './path';
import { getToC, type PageProps, type StarlightRouteData } from './route-data';
import type { StarlightDocsEntry } from './routing';
import { slugToLocaleData } from './slugs';
import { getPrevNextLinks, getSidebar } from './navigation';
import { useTranslations } from './translations';

/**
 * The frontmatter schema for virtual pages derived from the default schema for Starlight’s `docs`
 * content collection.
 * The frontmatter schema for virtual pages cannot include some properties which will be omitted
 * and some others needs to be refined to a stricter type.
 */
const StarlightVirtualFrontmatterSchema = (context: SchemaContext) => {
	const docsSchema = collections.docs.schema!;
	const schema = typeof docsSchema === 'function' ? docsSchema(context) : docsSchema;

	return schema
		.and(
			z.object({
				/**
				 * Virtual pages can only be edited if an edit URL is explicitly provided.
				 */
				editUrl: z.union([z.string().url(), z.literal(false)]).default(false),
			})
		)
		.transform((frontmatter) => {
			/**
			 * The `sidebar` frontmatter prop only works for pages in an autogenerated links group.
			 * Virtual page links cannot be autogenerated.
			 *
			 * The removal of the `sidebar` prop is done using a transformer and not using the usual
			 * omit method because when the frontmatter schema is extended by the user, an intersection
			 * between the default schema and the user schema is created using the `and` method.
			 * Intersections in Zod returns a `ZodIntersection` object which does not have some methods
			 * like `omit` or `pick`.
			 *
			 * @see https://github.com/colinhacks/zod#intersections
			 */
			const { sidebar, ...others } = frontmatter;
			return others;
		});
};

/** Type of Starlight’s virtual frontmatter schema. */
// TODO(HiDeoo) This should not end up being exported, it's temporary to test reading the type somewhere else.
// TODO(HiDeoo) Note that the type is not `any`
export type StarlightVirtualFrontmatter = z.input<
	ReturnType<typeof StarlightVirtualFrontmatterSchema>
>;

/**
 * The props accepted by the `<VirtualPage/>` component.
 */
export type VirtualPageProps = Prettify<
	// Remove the index signature from `Route`, omit undesired properties and make the rest optional.
	Partial<Omit<RemoveIndexSignature<PageProps>, 'entry' | 'entryMeta' | 'id' | 'locale' | 'slug'>> &
		// Add back the mandatory slug property.
		Pick<PageProps, 'slug'> &
		// Add the sidebar definitions for a virtual page.
		Partial<Pick<StarlightRouteData, 'hasSidebar' | 'sidebar'>> & {
			// And finally add the virtual frontmatter properties in a `frontmatter` property.
			frontmatter: StarlightVirtualFrontmatter;
		}
>;

/**
 * A docs entry used for virtual pages meant to be rendered by plugins and which is safe to cast
 * to a `StarlightDocsEntry`.
 * A virtual docs entry cannot be rendered like a content collection entry.
 */
type VirtualDocsEntry = Omit<StarlightDocsEntry, 'id' | 'render'> & {
	/**
	 * The unique ID for this virtual page which cannot be inferred from codegen like content
	 * collection entries.
	 */
	id: string;
};

export function generateVirtualRouteData({
	props,
	url,
}: {
	props: VirtualPageProps;
	url: URL;
}): StarlightRouteData {
	const { isFallback, frontmatter, slug, ...routeProps } = props;
	const virtualFrontmatter = getVirtualFrontmatter(frontmatter);
	const id = `${stripLeadingAndTrailingSlashes(slug)}.md`;
	const localeData = slugToLocaleData(slug);
	const sidebar = props.sidebar ?? getSidebar(url.pathname, localeData.locale);
	const headings = props.headings ?? [];
	const virtualEntry: VirtualDocsEntry = {
		id,
		slug,
		body: '',
		collection: 'docs',
		data: {
			...virtualFrontmatter,
			sidebar: {
				attrs: {},
				hidden: false,
			},
		},
	};
	const entry = virtualEntry as StarlightDocsEntry;
	const entryMeta: StarlightRouteData['entryMeta'] = {
		dir: props.dir ?? localeData.dir,
		lang: props.lang ?? localeData.lang,
		locale: localeData.locale,
	};
	const editUrl = virtualFrontmatter.editUrl ? new URL(virtualFrontmatter.editUrl) : undefined;
	const lastUpdated =
		virtualFrontmatter.lastUpdated instanceof Date ? virtualFrontmatter.lastUpdated : undefined;
	const routeData: StarlightRouteData = {
		...routeProps,
		...localeData,
		id,
		editUrl,
		entry,
		entryMeta,
		hasSidebar: props.hasSidebar ?? entry.data.template !== 'splash',
		headings,
		labels: useTranslations(localeData.locale).all(),
		lastUpdated,
		pagination: getPrevNextLinks(sidebar, config.pagination, entry.data),
		sidebar,
		slug,
		toc: getToC({
			...routeProps,
			...localeData,
			entry,
			entryMeta,
			headings,
			id,
			locale: localeData.locale,
			slug,
		}),
	};
	if (isFallback) {
		routeData.isFallback = true;
	}
	return routeData;
}

/** Validates the virtual frontmatter properties from the props received by a virtual page. */
function getVirtualFrontmatter(frontmatter: StarlightVirtualFrontmatter) {
	// This needs to be in sync with ImageMetadata.
	// https://github.com/withastro/astro/blob/cf993bc263b58502096f00d383266cd179f331af/packages/astro/src/assets/types.ts#L32
	return StarlightVirtualFrontmatterSchema({
		image: () =>
			z.object({
				src: z.string(),
				width: z.number(),
				height: z.number(),
				format: z.union([
					z.literal('png'),
					z.literal('jpg'),
					z.literal('jpeg'),
					z.literal('tiff'),
					z.literal('webp'),
					z.literal('gif'),
					z.literal('svg'),
					z.literal('avif'),
				]),
			}),
	}).parse(frontmatter);
}

// https://stackoverflow.com/a/66252656/1945960
type RemoveIndexSignature<TType> = {
	[Tkey in keyof TType as string extends Tkey
		? never
		: number extends Tkey
		? never
		: symbol extends Tkey
		? never
		: Tkey]: TType[Tkey];
};

// https://www.totaltypescript.com/concepts/the-prettify-helper
type Prettify<TType> = {
	[TKey in keyof TType]: TType[TKey];
} & {};
